// This is an adaptation of ex3_TS.slim (or really, of recipe 13.9) to
// (a) not use tree-seq recording, and (b) include ancestry-tracking
// mutations at every site.  This is used to find the expected time
// for a SLiM run that models true local ancestry using marker
// mutations instead of the tree sequence.

// Runs with L=5e5, 1e6, and 2e6 were used to estimate the runtime
// and memory usage of this model at L=1e8; that's as big as I can
// get on my machine!

initialize() {
	defineConstant("L", 1e6);                      // chromosome length
	
	initializeMutationRate(0);
	initializeMutationType("m1", 0.5, "f", 0.1);   // beneficial
	initializeMutationType("m2", 0.5, "f", 0.0);   // p1 marker
	m2.convertToSubstitution = F;
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(1e-7);
}

1 {
	catn("START: " + time());
	
	sim.addSubpop("p1", 500);
	sim.addSubpop("p2", 500);
}

1 late() {
	// p1 and p2 are each fixed for one beneficial mutation
	p1.genomes.addNewDrawnMutation(m1, asInteger(L * 0.2));
	p2.genomes.addNewDrawnMutation(m1, asInteger(L * 0.8));
	
	// p1 has marker mutations at every position, to track ancestry
	p1.genomes.addNewMutation(m2, 0.0, 0:(L-1));
	
	// make p3 be an admixture of p1 and p2 in the next generation
	sim.addSubpop("p3", 1000);
	p3.setMigrationRates(c(p1, p2), c(0.5, 0.5));
}

2 late() {
	// get rid of p1 and p2
	p3.setMigrationRates(c(p1, p2), c(0.0, 0.0));
	p1.setSubpopulationSize(0);
	p2.setSubpopulationSize(0);
}

1: late() {
	catn(sim.generation + ": " + time());
}

2: late() {
	// we don't try to do the post-analysis that recipe 13.9 does
	if (sim.mutationsOfType(m1).size() == 0)
		sim.simulationFinished();
}

100000 late() {
	stop("Did not reach fixation of beneficial alleles.");
}
